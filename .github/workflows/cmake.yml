name: C++ CI

on:
  push:
    branches: ['*']
    tags: ['*']
  pull_request:
    branches: ['*']
  workflow_dispatch:
    inputs:
      build_type:
        description: Build type
        required: false
        default: 'Debug'
        type: choice
        options:
          - Debug
          - Release
          - RelWithDebInfo
          - MinSizeRel

env:
  BUILD_TYPE: ${{ inputs.build_type || 'Debug' }}
  EXECUTABLE_NAME: "oop"
  INPUT_FILENAME: "tastatura.txt"
  BIN_DIR: "bin"
  BUILD_DIR: "build"

jobs:
  cppcheck:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install cppcheck
        run: |
          sudo apt update
          sudo apt install -y cppcheck

      - name: Run cppcheck
        run: |
          cppcheck --enable=all --inconclusive --std=c++20 --quiet src/ generated/src/

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-14, windows-2022]
        compiler: [gcc, clang, msvc]
        build_type: [Debug, Release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        shell: bash  # Ensure bash is used on all platforms
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-22.04" ]; then
            sudo apt update
            sudo apt install -y libopencv-dev libsfml-dev cmake g++
          elif [ "${{ matrix.os }}" == "macos-14" ]; then
            if ! command -v brew &> /dev/null; then
              echo "Homebrew not found. Installing..."
              /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            fi
            brew install opencv sfml cmake llvm
          elif [ "${{ matrix.os }}" == "windows-2022" ]; then
            # Install OpenCV via Chocolatey
            choco install opencv --yes --limit-output
            if [ $? -eq 0 ]; then
              echo "OpenCV installed successfully."
            else
              echo "OpenCV installation failed." >&2
              exit 1
            fi

            # Try installing SFML using Chocolatey or fallback to manual installation
            choco install sfml --yes --limit-output || {
              echo "SFML package not found in Chocolatey. Attempting manual installation."
              # Download SFML from the official website
              curl -L https://www.sfml-dev.org/files/SFML-2.5.1-windows-vc15-64-bit.zip -o C:/tools/sfml.zip
              if [ $? -eq 0 ]; then
                echo "SFML downloaded successfully."
              else
                echo "Error downloading SFML." >&2
                exit 1
              fi

              # Unzip SFML to C:/tools/sfml
              unzip C:/tools/sfml.zip -d C:/tools/sfml
              if [ $? -eq 0 ]; then
                echo "SFML extracted successfully."
              else
                echo "Error extracting SFML." >&2
                exit 1
              fi

              # Verify that SFML was extracted
              if [ ! -d "C:/tools/sfml/SFML-2.5.1" ]; then
                echo "Error: SFML directory not found at C:/tools/sfml/SFML-2.5.1" >&2
                exit 1
              fi
            }
          
            # Configuring OpenCV_DIR and SFML_DIR for Windows
            echo "Setting OpenCV and SFML environment variables"
          
            # Using PowerShell to set environment variables in the Windows runner
            pwsh -Command "$env:OPENCV_DIR='C:/tools/opencv/build'; [System.Environment]::SetEnvironmentVariable('OPENCV_DIR', $env:OPENCV_DIR, 'User')"
            pwsh -Command "$env:SFML_DIR='C:/tools/sfml/SFML-2.5.1'; [System.Environment]::SetEnvironmentVariable('SFML_DIR', $env:SFML_DIR, 'User')"

            # Configuring OpenCV_DIR and SFML_DIR
            echo "Configuring OpenCV_DIR"
            echo "C:/tools/opencv/build" >> $GITHUB_ENV
            echo "Configuring SFML_DIR"
            echo "C:/tools/sfml/SFML-2.5.1" >> $GITHUB_ENV

            # Verifying OpenCV and SFML installation
            echo "Verifying OpenCV and SFML installation"
            if [ ! -d "C:/tools/opencv/build" ]; then
              echo "Error: OpenCV directory not found at C:/tools/opencv/build" >&2
              exit 1
            fi
            if [ ! -d "C:/tools/sfml/SFML-2.5.1" ]; then
              echo "Error: SFML directory not found at C:/tools/sfml/SFML-2.5.1" >&2
              exit 1
            fi
          fi

      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..

      - name: Build
        run: |
          cd build
          cmake --build .

      - name: Run Tests
        run: |
          cd build
          ctest --output-on-failure

  clang-tidy:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install clang-tidy
        run: |
          sudo apt update
          sudo apt install -y clang-tidy

      - name: Run clang-tidy
        run: |
          # Ensure that the src directory exists and is populated with .cpp files
          if [ -d "src" ]; then
            clang-tidy src/*.cpp -- -std=c++20
          else
            echo "Source directory 'src' does not exist or is empty."
          fi
