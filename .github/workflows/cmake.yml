name: C++ CI

on:
  push:
    branches: ['*']
    tags: ['*']
  pull_request:
    branches: ['*']
  workflow_dispatch:
    inputs:
      build_type:
        description: Build type
        required: false
        default: 'Debug'
        type: choice
        options:
          - Debug
          - Release
          - RelWithDebInfo
          - MinSizeRel

env:
  BUILD_TYPE: ${{ inputs.build_type || 'Debug' }}
  EXECUTABLE_NAME: "oop"
  INPUT_FILENAME: "tastatura.txt"
  BIN_DIR: "bin"
  BUILD_DIR: "build"

jobs:
  cppcheck:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install cppcheck
        run: |
          sudo apt update
          sudo apt install -y cppcheck

      - name: Run cppcheck
        run: |
          cppcheck --enable=all --inconclusive --std=c++20 --quiet src/ generated/src/

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-14, windows-2022]
        compiler: [gcc, clang, msvc]
        build_type: [Debug, Release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        shell: bash  # Ensure bash is used on all platforms
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-22.04" ]; then
            sudo apt update
            sudo apt install -y libopencv-dev libsfml-dev cmake g++
          elif [ "${{ matrix.os }}" == "macos-14" ]; then
            if ! command -v brew &> /dev/null; then
              echo "Homebrew not found. Installing..."
              /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            fi
            brew install opencv sfml cmake llvm
          elif [ "${{ matrix.os }}" == "windows-2022" ]; then
            echo "Installing dependencies for Windows"
            choco install opencv llvm cmake mingw
          fi

      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..

      - name: Build
        run: |
          cd build
          cmake --build .

      - name: Run Tests
        run: |
          cd build
          ctest --output-on-failure

  clang-tidy:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install clang-tidy
        run: |
          sudo apt update
          sudo apt install -y clang-tidy

      - name: Run clang-tidy
        run: |
          # Ensure that the src directory exists and is populated with .cpp files
          if [ -d "src" ]; then
            clang-tidy src/*.cpp -- -std=c++20
          else
            echo "Source directory 'src' does not exist or is empty."
          fi
  

  clang-tidy-macos-windows:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-14, windows-2022 ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify src directory
        run: |
          if [ -d "generated/src" ]; then
            echo "src directory exists."
            ls src
          else
            echo "src directory does not exist or is empty."
            exit 1
          fi
        shell: bash

      - name: Install clang-tidy dependencies
        run: |
          if [[ "${{ matrix.os }}" == "macos-14" ]]; then
            brew install llvm
            echo 'export PATH="/usr/local/opt/llvm/bin:$PATH"' >> ~/.bash_profile
            source ~/.bash_profile
          elif [[ "${{ matrix.os }}" == "windows-2022" ]]; then
            choco install llvm
          fi
        shell: bash

      - name: Run clang-tidy
        run: |
          clang-tidy $(find src -name '*.cpp') -- -std=c++20
        shell: bash
