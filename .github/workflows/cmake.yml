name: C++ CI

on:
  push:
    branches: ['*']
  pull_request:
    branches: ['*']

env:
  BUILD_TYPE: ${{ matrix.build_type }}
  BIN_DIR: "bin"
  BUILD_DIR: "build"

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-14, windows-2022]
        compiler: [gcc, clang]
        build_type: [Debug, Release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          if [[ "${{ matrix.os }}" == 'ubuntu-22.04' ]]; then
            sudo apt update
            sudo apt install -y libopencv-dev libsfml-dev cmake g++ clang-tidy cppcheck
          elif [[ "${{ matrix.os }}" == 'macos-14' ]]; then
            brew update
            brew install opencv sfml cmake clang-tidy cppcheck
          elif [[ "${{ matrix.os }}" == 'windows-2022' ]]; then
            choco install cmake mingw cppcheck clang-tidy
          fi

      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..

      - name: Build
        run: |
          cd build
          cmake --build .

      - name: Run Tests
        run: |
          cd build
          ctest --output-on-failure

  cppcheck:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run cppcheck
        run: |
          cppcheck --enable=all --inconclusive --std=c++20 --quiet src/ generated/src/

  clang-tidy:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run clang-tidy
        run: |
          clang-tidy $(find src generated/src -name '*.cpp') -- -std=c++20
